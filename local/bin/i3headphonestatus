#!/usr/bin/zsh

# from the i3status man page

# EXTERNAL SCRIPTS/PROGRAMS WITH I3STATUS
#        In i3status, we don’t want to implement process management again. Therefore, there is no module to run arbitrary scripts or commands. Instead, you should use your shell, for example like this:
#
#        Example for prepending the i3status output:
#
#            #!/bin/sh
#            # shell script to prepend i3status with more stuff
#
#            i3status | while :
#            do
#                    read line
#                    echo "mystuff | $line" || exit 1
#            done
#
#        Put that in some script, say .bin/my_i3status.sh and execute that instead of i3status.
#
#        Note that if you want to use the JSON output format (with colors in i3bar), you need to use a slightly more complex wrapper script. There are examples in the contrib/ folder, see https://github.com/i3/i3status/tree/master/contrib

# The example I followed is https://github.com/i3/i3status/blob/master/contrib/net-speed.sh
# **including the comments therein**.
#
# The output of `pactl list sinks` shows on 'kona' (aka 'my machine')
#
#```
#...
#Sink #3
#	State: SUSPENDED
#	Name: alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp__sink
#...
#	Ports:
#		[Out] Speaker: Speaker (type: Speaker, priority: 100, availability unknown)
#		[Out] Headphones: Headphones (type: Headphones, priority: 200, not available)
#	Active Port: [Out] Speaker
#...
#```
#
# The sinks match to what one can see in `pavucontrol`.
# The `State:` is running during playback.

attempt() {
  i3status | (read line && echo "$line" && read line && echo "$line" && while :
  do
    read statusline

    # parsing pactl starts here
    listing=(${(f)"$(LC_MESSAGES=C pactl list sinks 2> /dev/null)"})
    start=false
    for l in $listing; do
      [[ $l == *State:\ RUNNING* ]] && start=true
      [[ $l == *"Name: alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp__sink"* ]] && start=true
      [[ $start == false ]] && continue
      if [[ $l == *Active\ Port:* ]]; then
        [[ $l == *Headphones* ]] && indicator=" " || indicator=""
        break
      fi
    done
    # parsing pactl is done

    echo "${statusline%\"\}\]}→${indicator}\"}]" || exit 1
  done)
}

attempt "$@"
