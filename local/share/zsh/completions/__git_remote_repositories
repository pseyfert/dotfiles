#autoload

(( $+functions[__gitlab_cache_invalid] )) ||
__gitlab_cache_invalid() {
  local -a oldp
  oldp=( "$1"(Nmh+1) )
  (( $#oldp ))
}

__gitlab_projects() {
  # $1 = group id
  # $2 = group name
  local logrequests # unused
  if _cache_invalid projects_of_$1 || ! _retrieve_cache projects_of_$1; then
    local -a projects
    projects=(${(f)"$(curl --header "PRIVATE-TOKEN: $GITLABTOKEN" --get "https://${GITLABINSTANCE:-gitlab.com}/api/v4/groups/$1/projects" 2>/dev/null | jq -r '.[] | (select(.description!="")|"\(.path):\(.description)"),(select(.description=="")|"\(.path)")')"})
    zstyle -b ":completion:${curcontext}:" log-requests logrequests && logger -i -t zsh-gitlab-tabcompletion -- "$USERNAME requests https://${GITLABINSTANCE:-gitlab.com}/api/v4/groups/$1/projects"
    _store_cache projects_of_$1 projects
  else
    zstyle -b ":completion:${curcontext}:" log-requests logrequests && logger -i -t zsh-gitlab-tabcompletion -- "using cache for project lookup of group $2 ($1)"
  fi
  _describe -t gitlab-projects-in-$2 'private gitlab repositories' projects -S '.git'
}

__gitlab() {
  # behaviour, assumptions, mandatory customisation
  #  - I assume the environment variables
  #     GITLABINSTANCE the gitlab instance you're working with (gitlab.com is the default)
  #     GITLABNAME     name of your top level gitlab group
  #     GITLABTOKEN    your personal API token
  #     GITLABGROUPID  the group id of the aforementionned gitlab group
  #    are set
  #  - I assume you use zsh's git completion. This file should go into your $FPATH and will override
  #     the (intentionally overridable) function __git_remote_repositories [here](https://github.com/zsh-users/zsh/blob/2644e3097dd26babf73ea8664f30341b262a2450/Completion/Unix/Command/_git#L7295).
  #  - I assume and all your work is within one group and its subgroups
  #     TODO: This could be updated moderately easily by going to associative arrays
  #  - The cache is assumed valid for 1h and kept in $HOME/.gitlab-completion-cache
  #     Cache invalidation can be done by providing __gitlab_cache_invalid as explained under `_cache_invalid` in [the zshcompsys man page](https://manpages.debian.org/unstable/zsh-common/zshcompsys.1.en.html#UTILITY_FUNCTIONS)
  #     Alternatively `zstyle ":completion:*:git-clone:*" cache-policy _user_defined_function can be used to specify the completion function.
  #     Setting `zstyle ":completion:*:git-clone:*" cache-policy true` ignores the cache.
  #     Setting `zstyle ":completion:*:git-clone:*" cache-path /some/path` allows to manually set the cache path
  #  - Some logging (monitoring API calls) is done via `logger` if enabled
  #     Use `zstyle ':completion:*:git-clone:*" log-requests on` to enable logging
  #     This is not a standard style!
  #  - Ideally users have
  #     zstyle ':completion:*' group-name ''                                     # separate groups and projects
  #     zstyle ':completion:*:descriptions' format $'%{\e[0;33m%}%d:%{\e[0m%}'   # show "headlines" for complections
  #  - paths (full_path/path) and descriptions are parsed from gitlab.
  #     I suspect the parsed json is safely used and doesn't allow code injection by someone editing descriptions.
  #     I do not guarantee it!
  #     I assume `full_path`, `path`, and `id` from gitlab only a-zA-Z0-9 (and / for full_path).
  #  - runtime dependency on `jq`, `curl`, and `logger`


  local request grouproot
  local logrequests cache_policy user_specified_cache # unused
  grouproot=$IPREFIX

  local cache_file_path
  cache_file_path=$HOME/.gitlab-completion-cache
  zstyle ":completion:${curcontext}:" use-cache on
  zstyle -s ":completion:${curcontext}:" cache-path user_specified_cache || zstyle ":completion:${curcontext}:" cache-path "$cache_file_path"
  zstyle -s ":completion:${curcontext}:" cache-policy cache_policy || zstyle ":completion:${curcontext}:" cache-policy __gitlab_cache_invalid

  if _cache_invalid gitlabgroups || ! _retrieve_cache gitlabgroups; then
    local groupsresponse 
    request="https://${GITLABINSTANCE:-gitlab.com}/api/v4/groups/$GITLABGROUPID/descendant_groups"
    # When restricting the subgroup search, remove trailing slashes.
    # In case the group's name is already complete, that would remove the group from the search results and prevent groupid lookup.
    [[ -n $PREFIX ]] && request+=\?search=${PREFIX%/}
    groupsresponse=$(curl --header "PRIVATE-TOKEN: $GITLABTOKEN" --get $request 2>/dev/null)
    zstyle -b ":completion:${curcontext}:" log-requests logrequests && logger -i -t zsh-gitlab-tabcompletion -- "$USERNAME requests $request"
    # curl --header "PRIVATE-TOKEN: $GITLABTOKEN" --get https://${GITLABINSTANCE:-gitlab.com}/api/v4/groups/${GITLABGROUPID}/descendant_groups 2>/dev/null > /tmp/desc_groups
    # groupsresponse=$(cat /tmp/desc_groups)
    local -a groups
    groups=(${${(f)"$(jq -r '.[] | ( select(.description!="") | "\(.full_path):\(.description)"),( select(.description=="") | "\(.full_path)")' <<< $groupsresponse)"}#${GITLABNAME}/})
    _store_cache gitlabgroups groups groupsresponse
  else
    zstyle -b ":completion:${curcontext}:" log-requests logrequests && logger -i -t zsh-gitlab-tabcompletion -- "using cache for group lookup"
  fi
  _describe -t 'gitlab-groups' 'private gitlab groups to clone from' groups -qS '/'
  if compset -P '*/' ; then
    local potentialsubgroup potentialsubgroupid
    potentialsubgroup=${IPREFIX#$grouproot}
    potentialsubgroupid=$(jq ".[] | select(.full_path==\"$GITLABNAME/${potentialsubgroup%/}\")|.id" <<< $groupsresponse)
    if [[ -n $potentialsubgroupid ]] ; then
      __gitlab_projects $potentialsubgroupid $potentialsubgroup
    fi
  else
    __gitlab_projects $GITLABGROUPID $GITLABNAME
  fi
}


if compset -P "git@${GITLABINSTANCE:-gitlab.com}:${GITLABNAME}/" ; then
  __gitlab
else
  # "https\://\:@gitlab.cern.ch\:8443:cern gitlab with kerberos"
  local hosters; hosters=(
  "https\://github.com:github read only"
  "git@github.com\:pseyfert:github read/write from my account"
  "git@${GITLABINSTANCE:-gitlab.com}\:$GITLABNAME"
  )
  _describe -t 'git-hosters' 'host to clone from' hosters -qS/
fi
